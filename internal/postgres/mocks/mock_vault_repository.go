// Code generated by MockGen. DO NOT EDIT.
// Source: vault.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/dangerousmonk/gophkeeper/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockVaultRepository is a mock of VaultRepository interface.
type MockVaultRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVaultRepositoryMockRecorder
}

// MockVaultRepositoryMockRecorder is the mock recorder for MockVaultRepository.
type MockVaultRepositoryMockRecorder struct {
	mock *MockVaultRepository
}

// NewMockVaultRepository creates a new mock instance.
func NewMockVaultRepository(ctrl *gomock.Controller) *MockVaultRepository {
	mock := &MockVaultRepository{ctrl: ctrl}
	mock.recorder = &MockVaultRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultRepository) EXPECT() *MockVaultRepositoryMockRecorder {
	return m.recorder
}

// Deactivate mocks base method.
func (m *MockVaultRepository) Deactivate(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deactivate", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockVaultRepositoryMockRecorder) Deactivate(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockVaultRepository)(nil).Deactivate), ctx, id)
}

// Get mocks base method.
func (m *MockVaultRepository) Get(ctx context.Context, id int) (models.Vault, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(models.Vault)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVaultRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVaultRepository)(nil).Get), ctx, id)
}

// GetByUserID mocks base method.
func (m *MockVaultRepository) GetByUserID(ctx context.Context, userID int) ([]models.Vault, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.Vault)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockVaultRepositoryMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockVaultRepository)(nil).GetByUserID), ctx, userID)
}

// Insert mocks base method.
func (m *MockVaultRepository) Insert(ctx context.Context, v *models.Vault) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockVaultRepositoryMockRecorder) Insert(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVaultRepository)(nil).Insert), ctx, v)
}
