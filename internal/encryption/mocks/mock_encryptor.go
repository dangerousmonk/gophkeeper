// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPasswordEncryptor is a mock of PasswordEncryptor interface.
type MockPasswordEncryptor struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordEncryptorMockRecorder
}

// MockPasswordEncryptorMockRecorder is the mock recorder for MockPasswordEncryptor.
type MockPasswordEncryptorMockRecorder struct {
	mock *MockPasswordEncryptor
}

// NewMockPasswordEncryptor creates a new mock instance.
func NewMockPasswordEncryptor(ctrl *gomock.Controller) *MockPasswordEncryptor {
	mock := &MockPasswordEncryptor{ctrl: ctrl}
	mock.recorder = &MockPasswordEncryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordEncryptor) EXPECT() *MockPasswordEncryptorMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockPasswordEncryptor) CheckPassword(password, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", password, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockPasswordEncryptorMockRecorder) CheckPassword(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockPasswordEncryptor)(nil).CheckPassword), password, hash)
}

// HashPassword mocks base method.
func (m *MockPasswordEncryptor) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockPasswordEncryptorMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockPasswordEncryptor)(nil).HashPassword), password)
}
